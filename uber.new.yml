basePath: /v1
definitions:
  Activities:
    properties:
      count: {description: Total number of items available., format: int32, type: integer}
      history:
        items: {$ref: '#/definitions/Activity'}
        type: array
      limit: {description: Number of items to retrieve (100 max)., format: int32,
        type: integer}
      offset: {description: Position in pagination., format: int32, type: integer}
    type: object
  Activity:
    properties:
      uuid: {description: Unique identifier for the activity, type: string}
    type: object
  Error:
    properties:
      code: {format: int32, type: integer}
      fields: {type: string}
      message: {type: string}
    type: object
  PriceEstimate:
    properties:
      currency_code: {description: '[ISO 4217](http://en.wikipedia.org/wiki/ISO_4217)
          currency code.', type: string}
      display_name: {description: Display name of product., type: string}
      estimate: {description: 'Formatted string of estimate in local currency of the
          start location. Estimate could be a range, a single number (flat rate) or
          "Metered" for TAXI.', type: string}
      high_estimate: {description: Upper bound of the estimated price., type: number}
      low_estimate: {description: Lower bound of the estimated price., type: number}
      product_id: {description: 'Unique identifier representing a specific product
          for a given latitude & longitude. For example, uberX in San Francisco will
          have a different product_id than uberX in Los Angeles', type: string}
      surge_multiplier: {description: Expected surge multiplier. Surge is active if
          surge_multiplier is greater than 1. Price estimate already factors in the
          surge multiplier., type: number}
    type: object
  Product:
    properties:
      capacity: {description: 'Capacity of product. For example, 4 people.', type: string}
      description: {description: Description of product., type: string}
      display_name: {description: Display name of product., type: string}
      image: {description: Image URL representing the product., type: string}
      product_id: {description: 'Unique identifier representing a specific product
          for a given latitude & longitude. For example, uberX in San Francisco will
          have a different product_id than uberX in Los Angeles.', type: string}
    type: object
  Profile:
    properties:
      email: {description: Email address of the Uber user, type: string}
      first_name: {description: First name of the Uber user., type: string}
      last_name: {description: Last name of the Uber user., type: string}
      picture: {description: Image URL of the Uber user., type: string}
      promo_code: {description: Promo code of the Uber user., type: string}
    type: object
host: api.uber.com
info: {description: Move your app forward with the Uber API, title: Uber API, version: 1.0.0}
paths:
  /products:
    get:
      description: 'The Products endpoint returns information about the *Uber* products

        offered at a given location. The response includes the display name

        and other details about each product, and lists the products in the

        proper display order.

        '
      parameters:
      - {description: Latitude component of location., format: double, in: query,
        name: latitude, required: true, type: number}
      - {description: Longitude component of location., format: double, in: query,
        name: longitude, required: true, type: number}
      responses:
        200:
          description: An array of products
          schema:
            items: {$ref: '#/definitions/Product'}
            type: array
        default:
          description: Unexpected error
          schema: {$ref: '#/definitions/Error'}
      summary: Product Types
      tags: [Products]
produces: [application/json]
schemes: [https]
swagger: '2.0'
